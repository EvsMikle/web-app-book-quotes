package comm.octest.beans;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuoteFactory implements I_Quote {
	private Map<String, Flyweight> quotes = new HashMap<>();
	private Map<String, Integer> user_quotes = new HashMap<>();
	private Flyweight quote;
	private List<Observer> observers;

	public QuoteFactory() {
		quote = new QuoteManager();
		this.observers = new ArrayList<>();
	}

	public Flyweight addQuote(String name_book, String quote_text, int userId) throws SQLException {
		// CREATE THE KEY
		String key = name_book + quote_text;
		fetchQuotes(userId);

		quote = (QuoteManager) quotes.get(key);

		// IF IT DOESN'T EXIST, CREATE A NEW ONE IN THE MAP
		if (quote == null) {
			System.out.println("QUOTE EST NULL ");
			quote = new QuoteManager(name_book, quote_text, userId);
			putQuote(key, quote);
			int id_quote = quote.insertQuote();
			Observer e = new User();
			e.setEmail("mohamed@gmail");
			observers.add(e);
			getObservers();
			notifyObservers(id_quote);

		}

		addUserIds();
		String key2 = quote_text + userId;
		if (!user_quotes.containsKey(key2)) {
			user_quotes.put(key2, userId);
			quote.insertQuoteAuthorship();
		}

		// Notifier tout les users que la map quotes a ete mise a jour

		return quote;
	}

	public void addUserIds() throws SQLException {
		List<QuoteManager> userQuoteList = quote.fetchQuoteAuthorship();
		for (QuoteManager userQuote : userQuoteList) {
			String quote_text = userQuote.getQuoteText();
			int user_id = userQuote.getUserId();
			String key = quote_text + user_id;
			user_quotes.put(key, user_id);
		}

	}

	public void fetchQuotes(int user_id) throws SQLException {

		List<QuoteManager> fetchedQuotes = quote.fetchQuotes(user_id);
		for (QuoteManager q : fetchedQuotes) {
			String name_book = q.getName_book();
			String quote_text = q.getQuoteText();
			String key = name_book + quote_text;
			putQuote(key, quote);

		}
	}

	// ADD A QUOTE FROM THE MAP
	public void putQuote(String key, Flyweight quote) {
		quotes.put(key, quote);

	}

	// REMOVE A QUOTE FROM THE MAP
	public void removeQuote(String key, QuoteManager quote) {
		quotes.remove(key);
	}

	// ADD OBSERVERS
	public void addObservers(Observer user) {

		observers.add(user);
	}

	// REMOVE OBSERVERS
	public void removeObserver(Observer user) {
		observers.remove(user);
	}

	// GET OBSERVERS
	public void getObservers() {
		for (Observer ob : observers) {

			System.out.println("observers : " + ob.getEmail());
		}

	}

	// NOTIFY THE OBSERVER THAT THE THERE HAS BEEN A CHANGE
	public void notifyObservers(int id_quote) throws SQLException {

		for (Observer ob : observers) {
			ob.sendNotification(id_quote);
		}
	}
}
