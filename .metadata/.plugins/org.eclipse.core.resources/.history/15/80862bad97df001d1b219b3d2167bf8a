package comm.octest.beans;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import comm.octest.db.DAO;

public class QuoteFactory implements I_Quote {
	private Map<String, Quote> quotes = new HashMap<>();
	private Map<String, Integer> user_quotes = new HashMap<>();
	private final DAO quoteDAO;
	private Flyweight quote;
	private List<Observer> observers;

	public QuoteFactory(DAO quoteDAO) {
		this.quoteDAO = quoteDAO;
		this.observers = new ArrayList<>();
	}

	public Quote addQuote(String name_book, String quote_text, int userId) throws SQLException {
		// CREATE THE KEY
		String key = name_book + quote_text;
		fetchQuotes(userId);

		Quote quote = (Quote) quotes.get(key);

		// IF IT DOESN'T EXIST, CREATE A NEW ONE IN THE MAP
		if (quote == null) {
			quote = new Quote(name_book, quote_text, userId);
			putQuote(key, quote);
			quoteDAO.insertQuote(name_book, quote_text);
		}

		addUserIds();
		String key2 = quote_text + userId;
		if (!user_quotes.containsKey(key2)) {
			user_quotes.put(key2, userId);
			quoteDAO.insertUserQuote(quote_text, userId);
		}

		// Notifier tout les users que la map quotes a ete mise a jour
		// notifyObservers() ;

		return quote;
	}

	public void addUserIds() throws SQLException {
		List<Quote> userQuoteList = quoteDAO.fetchUserQuote();
		for (Quote userQuote : userQuoteList) {
			String quote_text = userQuote.getQuoteText();
			int user_id = userQuote.getUserId();
			String key = quote_text + user_id;
			user_quotes.put(key, user_id);
		}

	}

	public void fetchQuotes(int user_id) throws SQLException {
		Quote quote = new Quote();
		// List<Quote> quotesList = quote.fetchQuotes(user_id);
		List<Quote> fetchedQuotes = quoteDAO.fetchQuotes(user_id);
		for (Quote q : fetchedQuotes) {
			String name_book = q.getName_book();
			String quote_text = q.getQuoteText();
			String key = name_book + quote_text;
			putQuote(key, quote);

		}
	}

	// ADD A QUOTE FROM THE MAP
	public void putQuote(String key, Quote quote) {
		quotes.put(key, quote);

	}

	// REMOVE A QUOTE FROM THE MAP
	public void removeQuote(String key, Quote quote) {
		quotes.remove(key);
	}

	// ADD OBSERVERS
	public void addObservers(Observer user) {
		observers.add(user);
	}

	// REMOVE OBSERVERS
	public void removeObserver(Observer user) {
		observers.remove(user);
	}
	//NOTIFY THE OBSERVER THAT THE THERE HAS BEEN A CHANGE 

	public void notifyObservers() {
		for (Observer user : observers) {
			user.update();
		}
	}

}
