package comm.octest.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import comm.octest.beans.QuoteManager;

public class QuoteDAO {


	
	Connection connexion = null;
	Statement statement = null;
	ResultSet resultat = null;
	
	
	public void driver() {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			connexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/goodQuotes", "root", "");
			System.out.println("Connexion reussite ");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	//FETCH ALL THE QUOTES && CHECK IF THE USER LIKED THE QUOTE OR NOT 
		public List<QuoteManager> fetchQuotes(int user_id) throws SQLException {
			List<QuoteManager> quotes = new ArrayList<>();
			String color;
			driver();

			PreparedStatement preparedStatement = connexion.prepareStatement(
					"SELECT q.*, b.name AS book_name,a.name AS author_name, uq.id_user,u.full_name AS user_name, u.email as email FROM quotes q INNER JOIN books b ON q.id_book = b.id_book INNER JOIN authors a ON b.id_author = a.id_author INNER JOIN user_quote uq ON q.id_quote = uq.id_quote INNER JOIN users u ON uq.id_user= u.id_user  WHERE u.id_user !=? ");
			preparedStatement.setInt(1, user_id);
			ResultSet resultat = preparedStatement.executeQuery();

			while (resultat.next()) {
				String quote_text = resultat.getString("quote_text");
				String book_name = resultat.getString("book_name");
				Timestamp created_at = resultat.getTimestamp("created_at");
				String user_name = resultat.getString("user_name");
				String author_name = resultat.getString("author_name");
				int id_quote = resultat.getInt("id_quote");
				String emailOfTheProfile = resultat.getString("email") ;
				System.out.println("email of the owner of the quote is " +emailOfTheProfile) ;
				System.out.println("email of the owner of the quote is ") ;

				PreparedStatement preparedStatement2 = connexion
						.prepareStatement("SELECT * from like_quote WHERE id_user =? AND id_quote=?");
				preparedStatement2.setInt(1, user_id);
				preparedStatement2.setInt(2, id_quote);
				ResultSet resultat2 = preparedStatement2.executeQuery();
				if (resultat2.next()) {
					color = "red";

				} else {
					color = "blue";
				}

				QuoteManager quote = new QuoteManager(book_name, quote_text, author_name, created_at, user_name, id_quote,
						color,emailOfTheProfile);
				quotes.add(quote);
			}
			return quotes;
		}
		
		
		
		//
		public List<QuoteManager> fetchUserQuotes(int user_id,int id_user_session) throws SQLException {
			List<QuoteManager> quotes = new ArrayList<>();
			String color;
			driver();

			PreparedStatement preparedStatement = connexion.prepareStatement(
					"SELECT q.*, b.name AS book_name,a.name AS author_name, uq.id_user,u.full_name AS user_name, u.email as email FROM quotes q INNER JOIN books b ON q.id_book = b.id_book INNER JOIN authors a ON b.id_author = a.id_author INNER JOIN user_quote uq ON q.id_quote = uq.id_quote INNER JOIN users u ON uq.id_user= u.id_user  WHERE u.id_user =? ");
			preparedStatement.setInt(1, user_id);
			ResultSet resultat = preparedStatement.executeQuery();

			while (resultat.next()) {
				String quote_text = resultat.getString("quote_text");
				String book_name = resultat.getString("book_name");
				Timestamp created_at = resultat.getTimestamp("created_at");
				String user_name = resultat.getString("user_name");
				String author_name = resultat.getString("author_name");
				int id_quote = resultat.getInt("id_quote");
				String emailOfTheProfile = resultat.getString("email") ;
			

				PreparedStatement preparedStatement2 = connexion
						.prepareStatement("SELECT * from like_quote WHERE id_user =? AND id_quote=?");
				preparedStatement2.setInt(1, id_user_session);
				preparedStatement2.setInt(2, id_quote);
				ResultSet resultat2 = preparedStatement2.executeQuery();
				if (resultat2.next()) {
					color = "red";

				} else {
					color = "blue";
				}

				QuoteManager quote = new QuoteManager(book_name, quote_text, author_name, created_at, user_name, id_quote,
						color,emailOfTheProfile);
				quotes.add(quote);
			}
			return quotes;

		}

		
		//FETCH THE QUOTES OF THE USER CONNECTED
		public List<QuoteManager> fetchMyQuotes(String email) throws SQLException {
			List<QuoteManager> quotes = new ArrayList<>();
			driver();

			System.out.println("Affichage des quote de user : " + email);
			PreparedStatement preparedStatement = connexion.prepareStatement("SELECT q.*, b.name AS book_name,a.name AS author_name, uq.id_user,u.full_name AS user_name FROM quotes q INNER JOIN books b ON q.id_book = b.id_book INNER JOIN authors a ON b.id_author = a.id_author INNER JOIN user_quote uq ON q.id_quote = uq.id_quote INNER JOIN users u ON uq.id_user= u.id_user WHERE u.email =? ");
			preparedStatement.setString(1, email);
			ResultSet resultat = preparedStatement.executeQuery();

			while (resultat.next()) {
				String quote_text = resultat.getString("quote_text");
				String book_name = resultat.getString("book_name");
				Timestamp created_at = resultat.getTimestamp("created_at");
				String user_name = resultat.getString("user_name");
				String author_name = resultat.getString("author_name");
				int id_quote = resultat.getInt("id_quote");

				QuoteManager quote = new QuoteManager(book_name, quote_text, author_name, created_at, user_name, id_quote,email);
				quotes.add(quote);
			}
			return quotes;
		}
	
		
		// FETCH USER FAVORITE QUOTES
		public List<QuoteManager> fetchFavQuotes(int user_id) throws SQLException {
			List<QuoteManager> favQuotes = new ArrayList<>();
			driver();
			
			PreparedStatement preparedStatement2 = connexion.prepareStatement("SELECT id_quote FROM like_quote WHERE id_user=?");
			preparedStatement2.setInt(1, user_id);
			ResultSet resultat2 = preparedStatement2.executeQuery();
			
			while (resultat2.next()) {
				int quote_id = resultat2.getInt("id_quote");
				System.out.print("next1: " + quote_id);
				PreparedStatement preparedStatement = connexion.prepareStatement(
						"SELECT q.*, b.name AS book_name,a.name AS author_name,u.full_name AS user_name ,u.email as email FROM quotes q INNER JOIN books b ON q.id_book = b.id_book INNER JOIN authors a ON b.id_author = a.id_author INNER JOIN user_quote uq ON q.id_quote = uq.id_quote INNER JOIN users u ON uq.id_user= u.id_user WHERE q.id_quote=? ");
				preparedStatement.setInt(1, quote_id);
				ResultSet resultat = preparedStatement.executeQuery();

				while (resultat.next()) {
					System.out.println("next 2 ");
					String quote_text = resultat.getString("quote_text");
					String book_name = resultat.getString("book_name");
					Timestamp created_at = resultat.getTimestamp("created_at");
					String user_name = resultat.getString("user_name");
					String author_name = resultat.getString("author_name");
					String email = resultat.getString("email") ;
					String color = "red";

					QuoteManager quote = new QuoteManager(book_name, quote_text, author_name, created_at, user_name,
							quote_id, color,email);
					favQuotes.add(quote);
				}
			}
			return favQuotes;
		}
}
