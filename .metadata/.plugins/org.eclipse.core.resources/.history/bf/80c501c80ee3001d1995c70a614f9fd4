package comm.octest.beans;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BookFactory {

	private Map<String, I_Book> books = new HashMap<>();

	public I_Book addBook(String author_name, String type, String book_name) throws SQLException {
		// CREATE THE KEY
		String key = author_name + type + book_name;

		fetchBooks();
		I_Book book = (Book) books.get(key);
		// IF IT DOESN'T EXIST, CREATE A NEW ONE IN THE MAP
		if (book == null) {
			book = new Book(book_name, type, author_name);
			books.put(key, book);
			book.save(book);

		}
		return book;
	}
	public void updateBook(Flyweight quote) throws SQLException {
		
		String author_name = quote.getAuthor_name() ; 
	    int id_author = quote.getAuthor_id() ;
		String book_name = quote.getName_book();
		String quote_text = quote.getQuoteText();
		int id_quote = quote.getId_quote();
		int userId = quote.getUserId() ; 
		String type = quote.getType() ;
		
		
		String key = author_name + type + book_name;
		fetchBooks();
		I_Book book = (Book) books.get(key);
		
		
		
		if (book == null) {
			book = new Book(book_name, type, author_name);
			books.put(key, book);
			

		
		I_Book book2= new Book() ; 
		book2.setBook_name(book_name);
		book2.setId_quote(id_author);
		
		book.updateBook(book2);
		
	}else { 
		I_Book book2= new Book() ; ; 
		book2.removeAuthor(book2) ;
		book2.updateId(book2) ;
		
	}
		
	}

	public void fetchBooks() throws SQLException {
		I_Book book = new Book();
		List<I_Book> booksList = book.fetchBooks();

		for (I_Book b : booksList) {
			String book_name = b.getName_book();
			String type_name = b.getType();
			String author_name = b.getAuthor();

			String key = author_name + type_name + book_name;

			books.put(key, book);
		}

	}

}
