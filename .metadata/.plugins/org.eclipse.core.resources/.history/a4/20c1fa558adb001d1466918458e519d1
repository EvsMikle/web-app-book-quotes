package comm.octest.beans;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import comm.octest.db.DAO;

public class QuoteFactory {
    private  Map<String, Quote> quotes = new HashMap<>();
    private Map<String,Integer> userIds = new HashMap<>();

    public Quote addQuote(String name_author, String quote_text, int userId) throws SQLException {
        // CREATE THE KEY
        String key = name_author + quote_text ;
        fetchQuotes() ;
        
        Quote quote = (Quote) quotes.get(key);

        // IF IT DOESN'T EXIST, CREATE A NEW ONE IN THE MAP
        if (quote == null) {
            quote = new Quote(name_author, quote_text, userId);
            quotes.put(key, quote);
            quote.save();
        }
        userIds.put(key, userId);
        return quote;
    }

    
    public void addUserIds(int userId,String key) {
    	//FETCH TOUT LES INFOS DE LA TABLE userIds 
    	userIds.put(key, userId);
    	
    }
    public void fetchQuotes() throws SQLException { 
    	  Quote quote = new Quote() ; 
    	  List<Quote> quotesList = quote.fetchQuotes() ; 
    	  for(Quote q : quotesList) { 
          String name_author = q.getName_author();
    	 
    	  String quote_text  = q.getQuoteText() ; 
    	  String key = name_author+quote_text ;
    	  quotes.put(key, quote);
    	  }
    }
    
    public void displaySharedQuotes() {
        for (Quote quote : quotes.values()) {
            quote.display("a user");
        }
    }
   

    /*
    public void displaySharedQuotes() {
        for (Quote sharedQuote : quotes.values()) {
            sharedQuote.display("a user");
        }
    }*/
}
