/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.85
 * Generated at: 2023-05-09 00:42:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.List;
import comm.octest.beans.Flyweight;
import comm.octest.beans.Message;
import comm.octest.beans.QuoteManager;

public final class navBar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1678212913362L));
    _jspx_dependants.put("/WEB-INF/taglibs.jsp", Long.valueOf(1678214133056L));
    _jspx_dependants.put("jar:file:/C:/Users/Simofatt/workspace3/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153377882000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("comm.octest.beans.QuoteManager");
    _jspx_imports_classes.add("comm.octest.beans.Flyweight");
    _jspx_imports_classes.add("comm.octest.beans.Message");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("function updateNotifications() {\r\n");
      out.write("  var xhr = new XMLHttpRequest();\r\n");
      out.write("  xhr.onreadystatechange = function() {\r\n");
      out.write("    if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("      var notifications = JSON.parse(xhr.responseText);\r\n");
      out.write("      var list = document.getElementById(\"notifications-list\");\r\n");
      out.write("      list.innerHTML = \"\";\r\n");
      out.write("      for (var i = 0; i < notifications.length; i++) {\r\n");
      out.write("        var notification = notifications[i];\r\n");
      out.write("        // create a new list item element and set its HTML to the notification message with the quote link\r\n");
      out.write("        var listItem = document.createElement(\"li\");\r\n");
      out.write("        var link = document.createElement(\"a\");\r\n");
      out.write("        link.classList.add(\"dropdown-item\");\r\n");
      out.write("        link.setAttribute(\"href\", \"sharedQuotes?id_quote=\" + notification.id_quote);\r\n");
      out.write("        link.innerText = notification.message;\r\n");
      out.write("        listItem.appendChild(link);\r\n");
      out.write("        list.appendChild(listItem);\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("  };\r\n");
      out.write("  xhr.open(\"GET\", \"/navBar\", true);\r\n");
      out.write("  xhr.send();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Call updateNotifications() every 5 seconds\r\n");
      out.write("setInterval(function() {\r\n");
      out.write("  updateNotifications();\r\n");
      out.write("}, 5000);\r\n");
      out.write("</script>\r\n");
      out.write("In this example, the script uses the document.createElement() method to create a new a element for the quote link, sets its href attribute to the URL of the sharedQuotes page with the id_quote parameter set to the id_quote value of the notification, sets its text to the notification message using the innerText property, and appends it to a new li element that is added to the notifications list.\r\n");
      out.write("\r\n");
      out.write("Note that you'll need to update the servlet code to include the id_quote value in the JSON response for each notification object, so that the script can generate the quote link correctly.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("	");

int user_id = (int) session.getAttribute("user_id");
Flyweight quoteNotification = new QuoteManager();
List<Flyweight> notifications = quoteNotification.getNotification(user_id);  
int countNotif = notifications.size() ;
String emailNavBar= (String ) session.getAttribute("email") ;

Message message = new Message() ; 
List<Message> msgNotification = message.notification(emailNavBar) ;
int countMsgNotif = msgNotification.size() ;

      out.write("\r\n");
      out.write("	<!--<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"> -->\r\n");
      out.write("	<nav class=\"navbar navbar-expand-lg\">\r\n");
      out.write("		<a class=\"navbar-brand\" href=\"index\">Book Quotes</a>\r\n");
      out.write("		<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n");
      out.write("			data-target=\"#navbarNav\" aria-controls=\"navbarNav\"\r\n");
      out.write("			aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("			<span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("		</button>\r\n");
      out.write("		<div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n");
      out.write("			<ul class=\"navbar-nav\">\r\n");
      out.write("				<li class=\"nav-item active\"><a class=\"nav-link\"\r\n");
      out.write("					href=\"sharedQuotes\">Home</a></li>\r\n");
      out.write("				<li class=\"nav-item\"><a class=\"nav-link\" href=\"myQuotes\">My\r\n");
      out.write("						Quotes</a></li>\r\n");
      out.write("				<li class=\"nav-item dropdown\"><a\r\n");
      out.write("					class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\"\r\n");
      out.write("					role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n");
      out.write("					aria-expanded=\"false\"> Community </a>\r\n");
      out.write("					<div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n");
      out.write("						<a class=\"dropdown-item\" href=\"people\">People</a> <a\r\n");
      out.write("							class=\"dropdown-item\" href=\"discussion\">Discussions</a>\r\n");
      out.write("					</div></li>\r\n");
      out.write("				<li class=\"nav-item\"><a class=\"nav-link\" href=\"addQuote\">Add\r\n");
      out.write("						Quotes</a></li>\r\n");
      out.write("			</ul>\r\n");
      out.write("			<ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("				<li class=\"nav-item dropdown\"><a\r\n");
      out.write("					class=\"nav-link dropdown-toggle\" href=\"#\" id=\"profileDropdown\"\r\n");
      out.write("					role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n");
      out.write("					aria-expanded=\"false\"> <i class=\"fas fa-user\"></i>\r\n");
      out.write("				</a>\r\n");
      out.write("					<div class=\"dropdown-menu dropdown-menu-right\"\r\n");
      out.write("						aria-labelledby=\"profileDropdown\">\r\n");
      out.write("						<a class=\"dropdown-item\" href=\"profile\">Profile</a> <a\r\n");
      out.write("							class=\"dropdown-item\" href=\"\">Friends</a> <a\r\n");
      out.write("							class=\"dropdown-item\" href=\"discussion\">Discussions</a> <a\r\n");
      out.write("							class=\"dropdown-item\" href=\"favQuotes\">Favorite Quotes</a> <a\r\n");
      out.write("							class=\"dropdown-item\" href=\"addQuotes\">Add Quote</a> <a\r\n");
      out.write("							class=\"dropdown-item\" href=\"settings\">Account Settings</a>\r\n");
      out.write("						<div class=\"dropdown-divider\"></div>\r\n");
      out.write("						<a class=\"dropdown-item\" href=\"#\">Sign Out</a>\r\n");
      out.write("					</div></li>\r\n");
      out.write("\r\n");
      out.write("				<li class=\"nav-item dropdown\"><a\r\n");
      out.write("					class=\"nav-link dropdown-toggle\" href=\"#\" id=\"notifDropdown\"\r\n");
      out.write("					role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n");
      out.write("					aria-expanded=\"false\"> <i class=\"far fa-bell\"></i> <span\r\n");
      out.write("						class=\"badge badge-warning\">");
      out.print((countNotif));
      out.write("</span>\r\n");
      out.write("				</a>\r\n");
      out.write("\r\n");
      out.write("					<div class=\"dropdown-menu dropdown-menu-right\"\r\n");
      out.write("						aria-labelledby=\"notifDropdown\">\r\n");
      out.write("\r\n");
      out.write("						");

						for (Flyweight notifs : notifications) {
															int id_quote = notifs.getId_quote();
						
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("						<a class=\"dropdown-item\"\r\n");
      out.write("							href=\"sharedQuotes?id_quote=");
      out.print(id_quote);
      out.write("\">New Quote added!</a>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("						<div class=\"dropdown-divider\"></div>\r\n");
      out.write("						<a class=\"dropdown-item\" href=\"#\">View All Notifications</a>\r\n");
      out.write("\r\n");
      out.write("					</div></li>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<li class=\"nav-item dropdown\"><a\r\n");
      out.write("					class=\"nav-link dropdown-toggle\" href=\"#\" id=\"notifDropdown\"\r\n");
      out.write("					role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\r\n");
      out.write("					aria-expanded=\"false\"> <i class=\"far fa-envelope\"></i> <span\r\n");
      out.write("						class=\"badge badge-warning\">");
      out.print(countMsgNotif );
      out.write("</span>\r\n");
      out.write("				</a>\r\n");
      out.write("\r\n");
      out.write("					<div class=\"dropdown-menu dropdown-menu-right\"\r\n");
      out.write("						aria-labelledby=\"notifDropdown\">\r\n");
      out.write("\r\n");
      out.write("						");
for (Message msgNotif : msgNotification ) { 
                    	String id_from = msgNotif.getFrom() ; 
                    	Message msg = new Message() ;
                    	String  from_name = msg.getName(id_from) ; 
                    	String msgs= msgNotif.getMsg() ;
                     
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("						<a class=\"dropdown-item\" href=\"chat?withClientId=");
      out.print(id_from);
      out.write("\">\r\n");
      out.write("							");
      out.print(from_name );
      out.write(" : \"");
      out.print(msgs );
      out.write("\"\r\n");
      out.write("						</a>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("						");
} 
      out.write("\r\n");
      out.write("						<div class=\"dropdown-divider\"></div>\r\n");
      out.write("						<a class=\"dropdown-item\" href=\"#\">View All Messages</a>\r\n");
      out.write("\r\n");
      out.write("					</div></li>\r\n");
      out.write("\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</nav>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    $(document).ready(function() {\r\n");
      out.write("        setInterval(function() {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: \"/notifications\",\r\n");
      out.write("                type: \"GET\",\r\n");
      out.write("                dataType: \"json\",\r\n");
      out.write("                success: function(response) {\r\n");
      out.write("                	 var notifications = JSON.parse(json);\r\n");
      out.write("                     var notificationsHtml = '';\r\n");
      out.write("                     for (var i = 0; i < notifications.length; i++) {\r\n");
      out.write("                         notificationsHtml += '<a class=\"dropdown-item\" href=\"#\">' + notifications[i] + '</a>';\r\n");
      out.write("                     }\r\n");
      out.write("                     document.getElementById('notifications').innerHTML = notificationsHtml;\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }, 5000); // Récupérer les notifications toutes les 5 secondes\r\n");
      out.write("    });\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
